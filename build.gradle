import docker.build.DockerClientProvider

plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.71'
    id "com.jfrog.artifactory" version "4.7.5"
    id 'com.github.johnrengelman.shadow' version '6.0.0'
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (!project.hasProperty('cordaArtifactoryUsername') || ext.cordaArtifactoryUsername == null) {
    ext.cordaArtifactoryUsername = System.getenv('CORDA_ARTIFACTORY_USERNAME')
            ?: System.getProperty('corda.artifactory.username')
}

// You can define this property in ~/.gradle/gradle.properties on your dev box.
if (!project.hasProperty('cordaArtifactoryPassword') || ext.cordaArtifactoryPassword == null) {
    ext.cordaArtifactoryPassword = System.getenv('CORDA_ARTIFACTORY_PASSWORD')
            ?: System.getProperty('corda.artifactory.password')
}

group 'net.corda'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

ext.corda_components_version = "4.5"

repositories {
    mavenCentral()
    mavenLocal()
    maven { url "https://repo.gradle.org/gradle/libs-releases-local/" }
    maven { url "https://software.r3.com/artifactory/freighter-dev" }
    maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-dependencies-dev" }
    maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-dependencies" }
    maven {
        url "https://software.r3.com/artifactory/r3-corda-releases"
        mavenContent {
            releasesOnly()
        }
        credentials {
            username = cordaArtifactoryUsername
            password = cordaArtifactoryPassword
        }
    }
}

configurations {
    firewallComponents
    registrationComponents
    registrationDependency
    driverDependency
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'io.kubernetes:client-java:8.0.2'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.30'
    implementation group: 'com.microsoft.azure', name: 'azure', version: '1.35.0'
    implementation group: 'com.microsoft.azure', name: 'msal4j', version: '1.4.0'
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.65'
    implementation group: 'org.bouncycastle', name: 'bcprov-ext-jdk15on', version: '1.65'
    implementation group: 'org.bouncycastle', name: 'bcpkix-jdk15on', version: '1.65'
    implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
    implementation group: 'freighter', name: 'freighter-core-utils', version: '0.6.0-SNAPSHOT'
    implementation group: 'io.github.classgraph', name: 'classgraph', version: '4.8.87'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
    implementation group: 'org.apache.commons', name: 'commons-text', version: '1.8'
    implementation group: 'com.microsoft.azure.postgresql.v2017_12_01', name: 'azure-mgmt-postgresql', version: '1.0.0-beta-5'
    implementation("com.michael-bull.kotlin-retry:kotlin-retry:1.0.5")
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8")
    implementation("com.github.ajalt:clikt:2.8.0")
    implementation("com.microsoft.azure:azure-mgmt-sql:1.36.0")

    implementation 'com.azure:azure-storage-file-share:12.5.0'

    firewallComponents group: "com.r3.corda", name: 'corda-firewall', version: "${corda_components_version}"
    registrationComponents group: 'com.r3.corda', name: 'corda-tools-ha-utilities', version: "${corda_components_version}"
    driverDependency group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: '6.4.0.jre8'
    driverDependency group: 'net.corda.azure.hsm', name: 'azure-keyvault-jar-builder', version: '1.0'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task buildFirewallImageDir(type: Copy) {

    def resourceDir = new File(project.buildDir, "firewallDockerBuild")

    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/firewall/Dockerfile").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/run-firewall.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/licenseAgreementCheck.sh").first())
    into(resourceDir)

    doFirst {
        resourceDir.deleteDir()
        resourceDir.mkdirs()
    }

    doLast {
        ant.copy file: configurations.firewallComponents.resolve().first(), tofile: new File(resourceDir, "firewall.jar")
    }
}

task buildSetupImageDir(type: Copy) {

    outputs.upToDateWhen { false }

    def resourceDir = new File(project.buildDir, "registrationDockerBuild")
    def driversDir = new File(resourceDir, "drivers")

    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/registration/Dockerfile").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/perform-registration.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/licenseAgreementCheck.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/generate-artemis-keystores.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/generate-tunnel-keystores.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/configure-artemis.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/import-node-ssl-to-bridge.sh").first())
    from(new FileNameFinder().getFileNames(project.projectDir.absolutePath, "**/shell/run-artemis.sh").first())
    into(resourceDir)

    doFirst {
        resourceDir.deleteDir()
        resourceDir.mkdirs()
    }

    doLast {
        ant.copy file: configurations.registrationComponents.resolve().first(), tofile: new File(resourceDir, "ha-utilities.jar")
        configurations.driverDependency.resolve().forEach {
            ant.copy file: it, tofile: new File(driversDir, it.name)
        }
    }
}

task buildFirewallImage(dependsOn: buildFirewallImageDir) {
    def resourceDir = new File(project.buildDir, "firewallDockerBuild")
    doLast {
        DockerClientProvider.buildDockerImage(resourceDir, "corda/enterprise-firewall", "${corda_components_version}", false, project)
    }

}

task buildSetupImage(dependsOn: buildSetupImageDir) {
    def resourceDir = new File(project.buildDir, "registrationDockerBuild")
    doLast {
        DockerClientProvider.buildDockerImage(resourceDir, "corda/enterprise-setup", "${corda_components_version}", false, project)
    }
}

task buildImages(dependsOn: [buildFirewallImage, buildSetupImage])

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'

mainClassName = 'net.corda.deployment.node.Playgound'